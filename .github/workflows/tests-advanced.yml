# Улучшенный workflow для автотестов UI с множественными браузерами
name: Advanced UI Tests

# Триггеры запуска workflow
on:
  push:
    branches: [main, develop]  # Запуск при пуше в main или develop
  pull_request:
    branches: [main]           # Запуск при PR в main
  schedule:
    - cron: '0 2 * * *'       # Ежедневный запуск в 2:00 UTC
  workflow_dispatch:          # Ручной запуск

# Переменные окружения
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

# Задания workflow
jobs:
  # Линтинг и проверка кода
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 mypy
          pip install -r requirements.txt

      - name: Run flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run type checking with mypy
        run: mypy . --ignore-missing-imports || true

  # Основные UI тесты
  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    needs: lint  # Запускается только после успешного линтинга
    
    strategy:
      fail-fast: false  # Не останавливать другие комбинации при ошибке
      matrix:
        browser: [chromium, firefox, webkit]  # Тестируем на разных браузерах

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'  # Кэшируем pip пакеты

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install --with-deps ${{ matrix.browser }}

      - name: Create test data directory
        run: |
          mkdir -p testdata/files
          # Создаем тестовое изображение если его нет
          if [ ! -f testdata/files/image.png ]; then
            # Создаем простое изображение 1x1 пиксель для тестов
            python3 -c "
            from PIL import Image
            import os
            os.makedirs('testdata/files', exist_ok=True)
            img = Image.new('RGB', (100, 100), color='red')
            img.save('testdata/files/image.png')
            print('Test image created')
            " || echo "Pillow not available, skipping image creation"
          fi

      - name: Run tests for ${{ matrix.browser }}
        env:
          BROWSERS: '["${{ matrix.browser }}"]'
          HEADLESS: 'true'
        run: |
          pytest tests/ \
            -m regression \
            -k "${{ matrix.browser }}" \
            --alluredir=allure-results-${{ matrix.browser }} \
            --maxfail=3 \
            -v

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            allure-results-${{ matrix.browser }}/
            videos/
            tracing/
          retention-days: 30

  # Генерация объединенного Allure отчета
  generate-report:
    name: Generate Allure Report
    runs-on: ubuntu-latest
    needs: ui-tests
    if: always()  # Запускается даже если тесты упали

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Merge Allure results
        run: |
          mkdir -p allure-results
          find artifacts -name "allure-results-*" -type d -exec cp -r {}/* allure-results/ \;

      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          allure_results: allure-results
          allure_history: allure-history
          keep_reports: 20  # Сохраняем историю последних 20 отчетов

      - name: Deploy to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

  # Уведомления о результатах
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [ui-tests, generate-report]
    if: always()

    steps:
      - name: Create notification message
        run: |
          if [ "${{ needs.ui-tests.result }}" == "success" ]; then
            echo "✅ All UI tests passed successfully!" >> notification.txt
          else
            echo "❌ Some UI tests failed. Check the Allure report." >> notification.txt
          fi
          echo "📊 Allure Report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> notification.txt

      - name: Display notification
        run: cat notification.txt
